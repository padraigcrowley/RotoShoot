using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LevelSetup_0001 : MonoBehaviour
{
  public GameObject LevelEnemyPrefab01;
  private GameObject[] Level0001Enemies;
  Dictionary<string, int> LevelCompletionCriteria = new Dictionary<string, int>();
  private bool lccMet = false; //levelcompletioncriteria

  void Start()
  {
    LevelCompletionCriteria.Add("EnemyKills", 20);
    LevelCompletionCriteria.Add("SurviveForXSeconds", 60);

    //MyGameplayManager.Instance.playerShipPos = Vector3.zero; // set the player ship position for this level
    MyGameplayManager.Instance.playerShipPos = new Vector3(0f, -6f, 1); // set the player ship position for this level

    // Array of EnemySpawnPoint objects
    EnemySpawnPoint[] spawnPoints = new EnemySpawnPoint[]
    {
      new EnemySpawnPoint(LevelEnemyPrefab01, new Vector2 (7.5f,-14), 1f, 2),
      new EnemySpawnPoint(LevelEnemyPrefab01, new Vector2 (-7.5f,-14), 1.5f, 2),
      new EnemySpawnPoint(LevelEnemyPrefab01, new Vector2 (8,2), 1f, 2),
      new EnemySpawnPoint(LevelEnemyPrefab01, new Vector2 (-8,2), 1.5f, 2),
      new EnemySpawnPoint(LevelEnemyPrefab01, new Vector2 (-10,-6), 1.25f, 4),
      new EnemySpawnPoint(LevelEnemyPrefab01, new Vector2 (12,-6), 1.25f, 4),
      new EnemySpawnPoint(LevelEnemyPrefab01, new Vector2 (0,13), 5f, 8)
    };

    Level0001Enemies = new GameObject[spawnPoints.Length]; //create as many gameobjects as array elements

    int index = 0;
    foreach (EnemySpawnPoint sp in spawnPoints)
    {
      print("spoint index: " + index);
      
      Level0001Enemies[index] = Instantiate(LevelEnemyPrefab01, sp.startPos, Quaternion.identity) as GameObject;
      Level0001Enemies[index].GetComponent<Enemy0001Behaviour>().speedMultiplierFromSpawner = sp.speedMultiplier;
      Level0001Enemies[index].GetComponent<Enemy0001Behaviour>().hpMultiplierFromSpawner = sp.hpMultiplier;
      index++;
    }
  }

  private void Update()
  {
    if (!lccMet)
    {
      foreach (string lccString in LevelCompletionCriteria.Keys)
      {
        lccMet = true;
        switch (lccString)
        {
          case "EnemyKills":
            if (MyGameplayManager.Instance.numEnemyKills < LevelCompletionCriteria[lccString])
            {
              lccMet = false;
            }
            break;
          case "SurviveForXSeconds":
            if (MyGameplayManager.Instance.numEnemyKills < LevelCompletionCriteria[lccString])
            {
              lccMet = false;
            }
            break;
          default:
            print("Default case");
            break;

        }
      }
    }
  }

}
